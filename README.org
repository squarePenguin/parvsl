* Implementing Parallelism in Lisp for REDUCE

**** Final year undergraduate dissertation by Andrei-Vlad Badelita, University of Cambridge

I would like to thank Dr Arthur C. Norman for all the invaluable help and support he offered
during the making of this project.

The following is extracted from the dissertation. You can find the rest at:
https://github.com/squarePenguin/parvsl/blob/master/writeup/dissertation/diss.pdf

** Introduction
The motivation for this project is to explore the implementation of multi-threading capabilities
within a working compiler and assess the benefits and trade-offs it brings to a
real-world application with a large, actively-developed body of code.
** REDUCE
REDUCE [1] is a portable general-purpose Computer Algebra System (CAS). It enables
symbolic manipulation of mathematical expressions and provides a wide range of algorithms
to solve problems spanning many fields. It has a friendly user interface and can
display maths and generate graphics.
REDUCE is one of a few open-source general-purpose CAS programs, alongside Maxima
and Axiom. The three projects are all built on top of different Lisp kernels. At the
time of this writing, none of these projects have any multi-threading capabilities. My
aim is to remove this limitation for REDUCE. The project is written in a language called
RLISP, which is a specialised Lisp dialect with an Algol-like syntax.
** VSL
There are multiple implementations of the Lisp backend REDUCE uses: PSL, CSL and
VSL. Visual Standard Lisp (VSL) is an interpreted implementation written in C. It is
capable of building the entirety of REDUCE, supports all the major platforms and architectures,
and despite being slower than CSL or PSL it is capable of running realistic
calculations including the full REDUCE test suite. It exists to provide a test-bed for ideas
that may later move to the much larger, compiled CSL version.
** Benefits of multithreading
The idea of using parallel computing to speed up computer algebra has come up in research
papers for many years [2], but much of the activity pre-dates the now ubiquitous multi-core
CPUs used in modern computers and the amount of memory which they now provide.
Moreover, advancements in single-core CPU performance have slowed down significantly,
as clock speeds have stagnated and even gone down in recent years. The biggest area
of improvement in these new CPUs is their core count and number of hardware threads.
Therefore, binding the performance of REDUCE to single-threaded performance limits the
speed gains brought by new hardware. This project involves building the infrastructure
REDUCE needs to take full advantage of todayâ€™s hardware.
*** Achievements
My project involved modifications to several thousand lines of C/C++ code, upgrading it
to make better idiomatic use of C++ as well as adding concurrency support. It has also
used raw Lisp code in bracket notation, along with the rebuilding of REDUCE, which
starts off as Lisp, but is almost entirely written in its own language. REDUCE as a
whole is around half a million lines of code and my system fully supports it. I have also
coded demonstration programs to show how it can take advantage of modern multi-core
processors to improve performance, given the thread support I now provide it with. In
some cases the runtime speed more than doubled, proving that CAS programs can benefit
from multi-threading support. The existing set of REDUCE test scripts have provided
me with significant examples to demonstrate correctness and analyse the overheads of
concurrency support on all the major platforms (Linux, Windows and MacOS), with
some surprising differences between them.

* Setup

While this project can be compiled stand-alone

#+BEGIN_SRC bash
svn checkout https://svn.code.sf.net/p/reduce-algebra/code/trunk reduce-algebra-code
cd reduce-algebra
git clone https://github.com/squarePenguin/parvsl.git
cd parvsl
make vsl
make reduce
./vsl -i reduce.img
#+END_SRC

To use the parallel version, simply prepend ~par~ to the commands above:
#+BEGIN_SRC bash
make parvsl
make parreduce
./parvsl -i parreduce.img
#+END_SRC
